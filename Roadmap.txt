Stage 1
    only main function
    int and bool
    no global vars
    local vars
    expression without function calls
    assignments
    if (now we have scopes)
    print
    while


fixed types for Ops!

FUNC <name>
END <name>

ASSIGN <idx> <idx|const>

IADD <idx> <idx|const> <idx|const> # int -> int > int
ISUB <idx> <idx|const> <idx|const>
IMUL <idx> <idx|const> <idx|const>
IDIV <idx> <idx|const> <idx|const>

IG <idx> <idx|const> <idx|const> # int -> int > bool # >
IL <idx> <idx|const> <idx|const>

BAND <idx> <idx|const> <idx|const> # bool -> bool -> bool
BOR <idx> <idx|const> <idx|const>


LABEL <label>
JMP <label>
JMPT <idx|const> <label>
JMPF <idx|const> <label>

PRINT <idx|const>


Stage 2
    global var
    function calls
    comments
    skip operator
    read


sandbox
+ - * / % int -> int
== != int, bool -> bool
< > <= >= int -> bool
&& || bool -> bool